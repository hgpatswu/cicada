Following is a list of operations applicable via --operation [op] in the order specified by command line
or by a config file. "output" must be placed as its final operations, otherwise, you will easily mess up.

You can treat the sequence of operations in SIMD (single-instruction multiple-data) fashion, 
in which the same sequence of operations is applied to each data (potentially in parallel)

binarize: perform binarization (monolingual tree)
	direction=[left|right] binarization direction
	size=binarization size
permute: permute tree (monolingual tree only)
	size=permute size
	exclude=[a non-terminal] to prohibit permutation. You can supply multiple
compose-earley: composition from tree with grammar
	yield=[source|target] use source or target yield for rule
compose-cky: composition from lattice (or sentence) with grammar
	yield=[source|target] use source or target yield for rule
compose-phrase: composition from lattice (or sentence) with phrase-based grammar
	distortion=[distortion limit] default: 0 (== monotone)
	yield=[source|target] use source or target yield for rule
generate-earley: re-generation from tree
	depth: depth of rule pattern 
	width: width of rule pattern 
apply: feature application
	size=<cube size>
	exact=[true|false]  no pruning feature application
	prune=[true|false]  cube-pruning for feature application
	grow=[true|false]   cube-growing for feature application
	forced=[true|false] forced feature application
	weights=weight file for feature
	weights-one=[true|false] one initialized weight
	feature=feature function
expected-ngram: expected ngram computation
	order=<ngram order>
	bos-eos=[true|false] include <s> and </s> in ngrams
	weights=weight file for feature
	weights-one=[true|false] one initialized weight
	scale=scaling for score
prune: pruning
	beam=beam pruning threshold in threshold > 0.0
	density=density pruning threshold in threshold > 1.0
	scale=scaling for score
	semiring=[tropical|logprob|log] semiring to perform score computation
	weights=weight file for feature
	weights-one=[true|false] one initialzied weight
intersect: compute intersection
normalize: feature value normalizer
	prefix=feature name prefix
remove-epsilon: remove epsilon for lattice
span-forest: annotate terminal span
output: kbest or hypergraph output
	kbest=<kbest size> zero for hypergraph output (default)
	unique=[true|false] unique translation
	weights=weight file for feature
	weights-one=[true|false] one initialize weight
	yield=[sentence|string|derivation|tree] yield for kbest
	graphviz=[true|false] dump in graphviz format
	statistics=[true|fals] dump various statistics (size etc.)
	directory=directory for output
	file=file for output


