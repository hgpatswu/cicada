Do we allow state-less features applied during composition???
	We need composition-based features for phrase-based MT
	to compute distortion/lexicalized reordering etc. not represented in
	hypergraph struct

	State-less features are sometimes related to composition algorithm,
	such as shift-reduce etc.

Support tree-to-tree transduction:
	Support non-tree transducer matching:
	match with phrases or hierarchical phrases whose spans match with
	syntactic spans.

Better MIRA training

System combination as statitical generation
  Parse nbests
  Collect rules
  Generate from rules

rename cicada_unite_{forest,lattice,sentence} to cicada_tool_{forest,lattice,sentence}???

Support sign-test/bootstrap for evaluation
	Add NIST?

Add cicada_oracle{,_mpi}, compute oracle translations (sentence and/or forest?) from hypergraphs

Add libstemmer? (and hand-coded Arabic rule?)


Added phrasal-composer, which performs phrase-based decoding..
      add lexicalized reordering... but difficult since we do not presesrve source-side phrases!!!
      

Allow binarization/permutation with arbitrary rule type?
      attach terminals to binarized rule...where?



GHKM extraction:
     handle forest (easy...)
     handle unaligned words... difficult.
     	    Do we construct new hypergraph?
	    or implement our own?

Unified phrase/rule/tree extractions?
	We can treat source/target sides as merely std::string for score computation,
	but differ in lexical weights (how to distinguish tokens from non-terminals etc.)

Use source side tree-fragment as a rule, and parse "lattice"
    Simply convert source side into a flat structure and parse via CKY
    	   + additional checking for target-side!
    Allow special encoding in tree-grammar...