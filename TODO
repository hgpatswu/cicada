Do we allow state-less features applied during composition???
	We need composition-based features for phrase-based MT
	to compute distortion/lexicalized reordering etc. not represented in
	hypergraph struct

	State-less features are sometimes related to composition algorithm,
	such as shift-reduce etc.

Support tree-to-tree transduction:
	We need different ids for target side's lhs. Do we preserve in rule-struct?
	What is the format for tree-fragment? use lisp-like struct?

Better MIRA training

System combination as statitical generation
  Parse nbests
  Collect rules
  Generate from rules

rename cicada_unite_{forest,lattice,sentence} to cicada_tool_{forest,lattice,sentence}???

Support sign-test/bootstrap for evaluation
	Add NIST?

Add cicada_oracle{,_mpi}, compute oracle translations (sentence and/or forest?) from hypergraphs

Add libstemmer? (and hand-coded Arabic rule?)


Added phrasal-composer, which performs phrase-based decoding..
      add distortion cost
      add lexicalized reordering
      HOW? 
      	   Our feature-function assumes no-information for terminal positions...
	   Do we add some features during composition? (Ugly)