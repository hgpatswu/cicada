
The hypergraph format is a-bit complicated, and most people will not want to
edit by yourself (including me).
A convenience tool exists, 

filter_penntreebank and filter_cabocha to convert from penn-treebank or cabocha output into hypergraph format.

PennTreebank filter was tested on output from stanford parser, thus, may not work on raw treebank file.
If you need support contact me.

filter_penntreebank [options]
options:
  --input arg (=-)      input file (parse trees)
  --output arg (=-)     output
  --escape              escape English penntreebank
  --leaf                collect leaf nodes only
  --map                 re-label tree by sentences (a set of "parsed" original sentences)
  --help                help message

For English treebanks, you may want to transform [,] or [.] into [COMMA] [PERIOD] respectively, otherwise
you may encounter serious errors. (',' is a separator for index and category!)

Cabocha supports only the latest version, 0.60pre4 (probably)

filter_cabocha [options]
options:
  --input arg (=-)      input file
  --output arg (=-)     output
  --leaf                collect leaf nodes only
  --help                help message

You can merge multiple hypergraphs in one by:
cicada_unite_forest
	This will simply merge by root...

FORMAT of HYPEERGRAPH

The hypergraph is represented by JSON data format (www.json.org)
Strings must be escaped (see JSON specification). You may insert spaces at arbitrary positions.
One-line-per-single-hypergraph is prefered for easier preprocessing.
We assume topologically sorted hypergraph (or, node-id is ordered by post-traversal order), but
input/output can handle any-ordered hypergraph.

HYPERGRAPH

{
 "rules" : [ RULE, RULE, ... ], (RULE position (one-based) is the rule-id inside this hypergraph. zero is reserved for no-rule (error?))
 "nodes" : [ NODE, NODE, ...],  (NODE positin (zero-based) is the node-id inside this hypergraph)
 "goal" : node-id-for-goal (usually pointing to the last-node. 0xffffffff (or unsigned int(-1)) == invalid graph)
}

RULE (rules are double quoted, thus you should perform proper escaping, i.e. " to \", \ to \\ etc.)

"lhs ||| rhs"

NODE (contains list of edge)

[EDGE, EDGE, ...]

EDGE

{
 "tail" : [node-id, node-id, ...],  (if no tails, this entry is empty)
 "feature" : {"feature-name" : double, "feature-name2" : double, ... }, (if no features, this entry is empty)
 "attribute" : {"attribute-name" : ATTRIBUTE, "attribute-name2" : ATTRIBUTE, ...}, (if no attributes, this entry is empty)
 "rule" : rule-id (zero indicating no-rule == invalid hypergraph)
}

ATTRIBUTE

float(double precision) | integer(64-bit) | " escaped string "

