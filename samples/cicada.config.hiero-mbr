goal = [s]

### grammars
### see cicada --grammar-list
grammar = {grammar diectory}/grammar:max-span=15

### glue rules...
### use straight rule:           [s] ||| [s,1] [x,2] ||| [s,1] [x,2]
### but do no use inverted rule: [s] ||| [s,1] [x,2] ||| [x,2] [s,1]
grammar = glue:straight=true,inverted=false,non-terminal=[x],goal=[s]

### simply copy from source-to-target
grammar = insertion:non-terminal=[x]

### features
### see cicada --feature-function-list
feature-function = ngram: file={ngram-directory}/ngram.en.5.expgram, order=5, name=ngram, coarse-order=3, no-bos-eos=true

### # of word
feature-function = word-penalty

### # of rules
feature-function = rule-penalty

### operations
### see cicada --operation-list

### CKY composition
operation = compose-cky

### marker pushing
operation = push-bos-eos

### feature application by cube-pruning (histograph size = 200)
operation = apply:prune=true,size=200,${weights}

### density pruning: # of hyperedges of a forest <= # of hyperedges of viterbi tree * density-size
### this is optional: may be required for MERT
#operation = prune:density=200,${weights}

### remove marker
operation = remove-bos-eos:forest=true

### MBR!
###
### first, collect expected ngram counts with scaling set to 1.2
### so that we will emphasize more on "viterbi"
operation = expected-ngram:${weights},scale=1.2,order=4

### second, compute expected-bleu
operation apply:exact=true,feature="bleu-expected:order=4"

### output: here, we will compute based on the weights.mbr
#operation = output:${file},kbest=${kbest},${weights}
operation = output:${file},kbest=${kbest},weights=weights.mbr

